// Mocks generated by Mockito 5.0.14 from annotations
// in flutter_app/test/widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:flutter/foundation.dart' as _i5;
import 'package:flutter/src/widgets/framework.dart' as _i6;
import 'package:flutter/src/widgets/navigator.dart' as _i4;
import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:openapi/api.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeApiClient_0 extends _i1.Fake implements _i2.ApiClient {}

class _FakeResponse_1 extends _i1.Fake implements _i3.Response {}

class _FakeCreateQuestionResponse_2 extends _i1.Fake
    implements _i2.CreateQuestionResponse {}

class _FakeGetQuestionsListResponse_3 extends _i1.Fake
    implements _i2.GetQuestionsListResponse {}

class _FakeTransitionDelegate_4<T> extends _i1.Fake
    implements _i4.TransitionDelegate<T> {}

class _FakeNavigatorState_5 extends _i1.Fake implements _i4.NavigatorState {
  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_6 extends _i1.Fake implements _i6.StatefulElement {
  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_7 extends _i1.Fake implements _i5.DiagnosticsNode {
  @override
  String toString(
          {_i5.TextTreeConfiguration? parentConfiguration,
          _i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [QuestionsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionsApi extends _i1.Mock implements _i2.QuestionsApi {
  MockQuestionsApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiClient get apiClient =>
      (super.noSuchMethod(Invocation.getter(#apiClient),
          returnValue: _FakeApiClient_0()) as _i2.ApiClient);
  @override
  _i7.Future<_i3.Response> createQuestionWithHttpInfo(
          _i2.CreateQuestionRequest? createQuestionRequest) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createQuestionWithHttpInfo, [createQuestionRequest]),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i7.Future<_i3.Response>);
  @override
  _i7.Future<_i2.CreateQuestionResponse> createQuestion(
          _i2.CreateQuestionRequest? createQuestionRequest) =>
      (super.noSuchMethod(
              Invocation.method(#createQuestion, [createQuestionRequest]),
              returnValue: Future<_i2.CreateQuestionResponse>.value(
                  _FakeCreateQuestionResponse_2()))
          as _i7.Future<_i2.CreateQuestionResponse>);
  @override
  _i7.Future<_i3.Response> getQuestionsListWithHttpInfo({Object? request}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getQuestionsListWithHttpInfo, [], {#request: request}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i7.Future<_i3.Response>);
  @override
  _i7.Future<_i2.GetQuestionsListResponse> getQuestionsList(
          {Object? request}) =>
      (super.noSuchMethod(
              Invocation.method(#getQuestionsList, [], {#request: request}),
              returnValue: Future<_i2.GetQuestionsListResponse>.value(
                  _FakeGetQuestionsListResponse_3()))
          as _i7.Future<_i2.GetQuestionsListResponse>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AnswersApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnswersApi extends _i1.Mock implements _i2.AnswersApi {
  MockAnswersApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiClient get apiClient =>
      (super.noSuchMethod(Invocation.getter(#apiClient),
          returnValue: _FakeApiClient_0()) as _i2.ApiClient);
  @override
  _i7.Future<_i3.Response> createAnswerWithHttpInfo(
          String? questionId, _i2.CreateAnswerRequest? createAnswerRequest) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createAnswerWithHttpInfo, [questionId, createAnswerRequest]),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i7.Future<_i3.Response>);
  @override
  _i7.Future<_i2.CreateQuestionResponse> createAnswer(
          String? questionId, _i2.CreateAnswerRequest? createAnswerRequest) =>
      (super.noSuchMethod(
          Invocation.method(#createAnswer, [questionId, createAnswerRequest]),
          returnValue: Future<_i2.CreateQuestionResponse>.value(
              _FakeCreateQuestionResponse_2())) as _i7
          .Future<_i2.CreateQuestionResponse>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [Navigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigator extends _i1.Mock implements _i4.Navigator {
  MockNavigator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.Page<dynamic>> get pages =>
      (super.noSuchMethod(Invocation.getter(#pages),
          returnValue: <_i4.Page<dynamic>>[]) as List<_i4.Page<dynamic>>);
  @override
  _i4.TransitionDelegate<dynamic> get transitionDelegate =>
      (super.noSuchMethod(Invocation.getter(#transitionDelegate),
              returnValue: _FakeTransitionDelegate_4<dynamic>())
          as _i4.TransitionDelegate<dynamic>);
  @override
  List<_i4.NavigatorObserver> get observers => (super.noSuchMethod(
      Invocation.getter(#observers),
      returnValue: <_i4.NavigatorObserver>[]) as List<_i4.NavigatorObserver>);
  @override
  _i4.RouteListFactory get onGenerateInitialRoutes =>
      (super.noSuchMethod(Invocation.getter(#onGenerateInitialRoutes),
          returnValue: (_i4.NavigatorState navigator, String initialRoute) =>
              <_i4.Route<dynamic>>[]) as _i4.RouteListFactory);
  @override
  bool get reportsRouteUpdateToEngine =>
      (super.noSuchMethod(Invocation.getter(#reportsRouteUpdateToEngine),
          returnValue: false) as bool);
  @override
  _i4.NavigatorState createState() =>
      (super.noSuchMethod(Invocation.method(#createState, []),
          returnValue: _FakeNavigatorState_5()) as _i4.NavigatorState);
  @override
  _i6.StatefulElement createElement() =>
      (super.noSuchMethod(Invocation.method(#createElement, []),
          returnValue: _FakeStatefulElement_6()) as _i6.StatefulElement);
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  void debugFillProperties(_i5.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toStringShallow(
          {String? joiner = r', ',
          _i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.debug}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toStringShallow, [], {#joiner: joiner, #minLevel: minLevel}),
          returnValue: '') as String);
  @override
  String toStringDeep(
          {String? prefixLineOne = r'',
          String? prefixOtherLines,
          _i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.debug}) =>
      (super.noSuchMethod(
          Invocation.method(#toStringDeep, [], {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel
          }),
          returnValue: '') as String);
  @override
  _i5.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i5.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode_7()) as _i5.DiagnosticsNode);
  @override
  List<_i5.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(Invocation.method(#debugDescribeChildren, []),
          returnValue: <_i5.DiagnosticsNode>[]) as List<_i5.DiagnosticsNode>);
  @override
  String toString({_i5.DiagnosticLevel? minLevel = _i5.DiagnosticLevel.info}) =>
      super.toString();
}
