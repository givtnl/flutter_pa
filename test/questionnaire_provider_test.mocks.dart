// Mocks generated by Mockito 5.0.14 from annotations
// in flutter_app/test/questionnaire_provider_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:http/http.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:openapi/api.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeApiClient_0 extends _i1.Fake implements _i2.ApiClient {}

class _FakeResponse_1 extends _i1.Fake implements _i3.Response {}

class _FakeCreateQuestionResponse_2 extends _i1.Fake
    implements _i2.CreateQuestionResponse {}

class _FakeGetQuestionsListResponse_3 extends _i1.Fake
    implements _i2.GetQuestionsListResponse {}

/// A class which mocks [QuestionsApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuestionsApi extends _i1.Mock implements _i2.QuestionsApi {
  MockQuestionsApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiClient get apiClient =>
      (super.noSuchMethod(Invocation.getter(#apiClient),
          returnValue: _FakeApiClient_0()) as _i2.ApiClient);
  @override
  _i4.Future<_i3.Response> createQuestionWithHttpInfo(
          _i2.CreateQuestionRequest? createQuestionRequest) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createQuestionWithHttpInfo, [createQuestionRequest]),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i4.Future<_i3.Response>);
  @override
  _i4.Future<_i2.CreateQuestionResponse> createQuestion(
          _i2.CreateQuestionRequest? createQuestionRequest) =>
      (super.noSuchMethod(
              Invocation.method(#createQuestion, [createQuestionRequest]),
              returnValue: Future<_i2.CreateQuestionResponse>.value(
                  _FakeCreateQuestionResponse_2()))
          as _i4.Future<_i2.CreateQuestionResponse>);
  @override
  _i4.Future<_i3.Response> getQuestionsListWithHttpInfo({Object? request}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #getQuestionsListWithHttpInfo, [], {#request: request}),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i4.Future<_i3.Response>);
  @override
  _i4.Future<_i2.GetQuestionsListResponse> getQuestionsList(
          {Object? request}) =>
      (super.noSuchMethod(
              Invocation.method(#getQuestionsList, [], {#request: request}),
              returnValue: Future<_i2.GetQuestionsListResponse>.value(
                  _FakeGetQuestionsListResponse_3()))
          as _i4.Future<_i2.GetQuestionsListResponse>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [AnswersApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockAnswersApi extends _i1.Mock implements _i2.AnswersApi {
  MockAnswersApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ApiClient get apiClient =>
      (super.noSuchMethod(Invocation.getter(#apiClient),
          returnValue: _FakeApiClient_0()) as _i2.ApiClient);
  @override
  _i4.Future<_i3.Response> createAnswerWithHttpInfo(
          String? questionId, _i2.CreateAnswerRequest? createAnswerRequest) =>
      (super.noSuchMethod(
              Invocation.method(
                  #createAnswerWithHttpInfo, [questionId, createAnswerRequest]),
              returnValue: Future<_i3.Response>.value(_FakeResponse_1()))
          as _i4.Future<_i3.Response>);
  @override
  _i4.Future<_i2.CreateQuestionResponse> createAnswer(
          String? questionId, _i2.CreateAnswerRequest? createAnswerRequest) =>
      (super.noSuchMethod(
          Invocation.method(#createAnswer, [questionId, createAnswerRequest]),
          returnValue: Future<_i2.CreateQuestionResponse>.value(
              _FakeCreateQuestionResponse_2())) as _i4
          .Future<_i2.CreateQuestionResponse>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [CreateAnswerRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateAnswerRequest extends _i1.Mock
    implements _i2.CreateAnswerRequest {
  MockCreateAnswerRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get userId =>
      (super.noSuchMethod(Invocation.getter(#userId), returnValue: '')
          as String);
  @override
  set userId(String? _userId) =>
      super.noSuchMethod(Invocation.setter(#userId, _userId),
          returnValueForMissingStub: null);
  @override
  String get questionId =>
      (super.noSuchMethod(Invocation.getter(#questionId), returnValue: '')
          as String);
  @override
  set questionId(String? _questionId) =>
      super.noSuchMethod(Invocation.setter(#questionId, _questionId),
          returnValueForMissingStub: null);
  @override
  List<_i2.CreateAnswerDetailRequest> get answers =>
      (super.noSuchMethod(Invocation.getter(#answers),
              returnValue: <_i2.CreateAnswerDetailRequest>[])
          as List<_i2.CreateAnswerDetailRequest>);
  @override
  set answers(List<_i2.CreateAnswerDetailRequest>? _answers) =>
      super.noSuchMethod(Invocation.setter(#answers, _answers),
          returnValueForMissingStub: null);
  @override
  String toString() => super.toString();
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}
